# .circleci/config.yml
#
# This file configures the CircleCI 2.0 build.
#
# Documentation:
# - Overview: https://circleci.com/docs/2.0/workflows/
# - Caching: https://circleci.com/docs/2.0/caching/
#
# Things to know:
# - every job is a container
# - cache is used for data that can potentially be reused between builds, provided we can
#   be sure it will not influence the build result other than by speeding it up.
# - cache is immutable. Sometimes we need to flush the cache, but we can't. That's why there is this
#   `v1-` at the beginning. Increment it when you need to change the cache content.
# - because we use `npm ci`, we cache the `~/.npm` directory and not `node_modules` which
#   is erased by `npm ci`.
# - to make sure the cache is indexed by the `package.json` and `package-lock.json` files,
#   we concatenate them into a temporary file whose checksum we use as part of the cache key.
# - for data that is specific to a build (commit), like the source code downloaded from github,
#   we use Circle CI's workspace feature to transport it between jobs.

version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.8

executors:
  node-docker:
    parameters:
      node-version:
        # renovate datasource=node-version depName=node
        default: 20.11.1
        type: string
    docker:
      - image: cimg/node:<<parameters.node-version>>
    resource_class: medium+
  node-redis-postgres-s3-docker:
    parameters:
      node-version:
        # renovate datasource=node-version depName=node
        default: 20.11.1
        type: string
    docker:
      - image: cimg/node:<<parameters.node-version>>
      - image: postgres:14.10-alpine
        environment:
          POSTGRES_USER: circleci
          POSTGRES_HOST_AUTH_METHOD: trust
      - image: redis:7.2.3-alpine
      - image: adobe/s3mock:3.5.2
        environment:
          - initialBuckets=pix-import-test
    resource_class: small
  node-browsers-docker:
    parameters:
      node-version:
        # renovate datasource=node-version depName=node
        default: 20.11.1
        type: string
    docker:
      - image: cimg/node:<<parameters.node-version>>-browsers
        environment:
          JOBS: 2
    resource_class: small
  node-browsers-redis-postgres-docker:
    parameters:
      node-version:
        # renovate datasource=node-version depName=node
        default: 20.11.1
        type: string
    docker:
      - image: cimg/node:<<parameters.node-version>>-browsers
      - image: postgres:14.10-alpine
        environment:
          POSTGRES_USER: circleci
          POSTGRES_HOST_AUTH_METHOD: trust
      - image: redis:7.2.3-alpine
    resource_class: medium+
  node-postgres-docker:
    parameters:
      node-version:
        # renovate datasource=node-version depName=node
        default: 20.11.1
        type: string
    docker:
      - image: cimg/node:<<parameters.node-version>>
      - image: postgres:14.10-alpine
        environment:
          POSTGRES_USER: circleci
          POSTGRES_HOST_AUTH_METHOD: trust
    resource_class: small

workflows:
  version: 2
  build-and-test:
    jobs:
      - checkout:
          context: Pix

      - root_lint_and_test:
          context: Pix
          requires:
            - checkout

      - api_lint:
          context: Pix
          requires:
            - checkout

      - api_test:
          context: Pix
          requires:
            - checkout

      - audit_logger_build_and_test:
          context: Pix
          requires:
            - checkout

      - mon_pix_install:
          context: Pix
          requires:
            - checkout

      - mon_pix_lint:
          context: Pix
          requires:
            - mon_pix_install

      - mon_pix_test:
          context: Pix
          requires:
            - mon_pix_install

      - orga_build_and_test:
          context: Pix
          requires:
            - checkout

      - certif_build_and_test:
          context: Pix
          requires:
            - checkout

      - admin_build_and_test:
          context: Pix
          requires:
            - checkout
      - pix1d_build_and_test:
          context: Pix
          requires:
            - checkout

      - e2e_test:
          context: Pix
          requires:
            - checkout

jobs:
  checkout:
    executor:
      name: node-docker
    working_directory: ~/pix
    steps:
      - run:
          name: Git clone --depth=1
          command: |
            #!/bin/sh
            set -e
            GIT_CLONE_DEPTH="1"
            # Workaround old docker images with incorrect $HOME
            # check https://github.com/docker/docker/issues/2968 for details
            if [ "${HOME}" = "/" ]
            then
              export HOME=$(getent passwd $(id -un) | cut -d: -f6)
            fi
            export SSH_CONFIG_DIR=${SSH_CONFIG_DIR:-"${HOME}/.ssh"}
            echo "Using SSH Config Dir '$SSH_CONFIG_DIR'"
            git --version

            mkdir -p "$SSH_CONFIG_DIR"
            chmod 0700 "$SSH_CONFIG_DIR"

            printf "%s" 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
            github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
            github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
            ' >>"$SSH_CONFIG_DIR/known_hosts"
            chmod 0600 "$SSH_CONFIG_DIR/known_hosts"

            rm -f "$SSH_CONFIG_DIR/id_rsa"
            printf "%s" "$CHECKOUT_KEY" >"$SSH_CONFIG_DIR/id_rsa"
            chmod 0600 "$SSH_CONFIG_DIR/id_rsa"
            if (: "${CHECKOUT_KEY_PUBLIC?}") 2>/dev/null; then
                rm -f "$SSH_CONFIG_DIR/id_rsa.pub"
                printf "%s" "$CHECKOUT_KEY_PUBLIC" >"$SSH_CONFIG_DIR/id_rsa.pub"
            fi

            export GIT_SSH_COMMAND="ssh -i \"$SSH_CONFIG_DIR/id_rsa\" -o UserKnownHostsFile=\"$SSH_CONFIG_DIR/known_hosts\""

            # use git+ssh instead of https
            git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
            git config --global gc.auto 0 || true

            echo 'Cloning git repository'
            mkdir -p '/home/circleci/pix'
            cd '/home/circleci/pix'
            git clone --depth="$GIT_CLONE_DEPTH" --no-checkout "$CIRCLE_REPOSITORY_URL" .

            echo 'Fetching from remote repository'
            if [ -n "$CIRCLE_TAG" ]; then
                git fetch --depth=${GIT_CLONE_DEPTH} --force --tags origin "+refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
            else
                git fetch --depth=${GIT_CLONE_DEPTH} --force origin "+refs/heads/${CIRCLE_BRANCH}:refs/remotes/origin/${CIRCLE_BRANCH}"
            fi

            if [ -n "$CIRCLE_TAG" ]; then
                echo 'Checking out tag'
                git checkout --force "$CIRCLE_TAG"
                git reset --hard "$CIRCLE_SHA1"
            else
                echo 'Checking out branch'
                git checkout --force -B "$CIRCLE_BRANCH" "$CIRCLE_SHA1"
                git --no-pager log --no-color -n 1 --format='HEAD is now at %h %s'
            fi
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - v1-pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Install root dependencies
          command: pnpm install
      - save_cache:
          key: v1-pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - node_modules
      - run:
          name: Remove .git folder
          command: rm -rf .git/
      - persist_to_workspace:
          root: ~/pix
          paths:
            - .

  root_lint_and_test:
    executor:
      name: node-docker
    working_directory: ~/pix
    steps:
      - attach_workspace:
          at: ~/pix
      - run:
          name: Lint scripts
          command: pnpm run lint:scripts
      - run:
          name: Lint yaml
          command: pnpm run lint:yaml

  api_lint:
    executor:
      name: node-redis-postgres-s3-docker
    working_directory: ~/pix
    steps:
      - attach_workspace:
          at: ~/pix
      - run:
          name: Lint
          command: pnpm --filter pix-api run lint
          environment:
            TEST_DATABASE_URL: postgres://circleci@localhost:5432/circleci
            TEST_REDIS_URL: redis://localhost:6379
          when: always

  api_test:
    executor:
      name: node-redis-postgres-s3-docker
    working_directory: ~/pix
    steps:
      - attach_workspace:
          at: ~/pix
      - run:
          name: Test
          command: pnpm --filter pix-api run test
          environment:
            TEST_DATABASE_URL: postgres://circleci@localhost:5432/circleci
            TEST_REDIS_URL: redis://localhost:6379
            TEST_IMPORT_STORAGE_ENDPOINT: http://localhost:9090
            TEST_IMPORT_STORAGE_BUCKET_NAME: pix-import-test
            MOCHA_FILE: /home/circleci/test-results/test-results.[hash].xml
            MOCHA_REPORTER: mocha-junit-reporter
          when: always
      - store_test_results:
          path: /home/circleci/test-results
      - store_artifacts:
          path: /home/circleci/test-results

  audit_logger_build_and_test:
    executor:
      name: node-postgres-docker
    working_directory: ~/pix
    steps:
      - attach_workspace:
          at: ~/pix
      - run:
          name: Lint
          command: pnpm --filter pix-audit-logger run lint
          environment:
            TEST_DATABASE_URL: postgres://circleci@localhost:5432/circleci
          when: always
      - run:
          name: Test
          command: pnpm --filter pix-audit-logger run test
          environment:
            PIX_API_CLIENT_SECRET: $2a$04$vkPRiypzeVQVG92/dCll7.5brjDQZVZc750VwKBc01icXjVIQqRVq
            TEST_DATABASE_URL: postgres://circleci@localhost:5432/circleci
          when: always
      - store_test_results:
          path: /home/circleci/test-results
      - store_artifacts:
          path: /home/circleci/test-results

  mon_pix_install:
    executor:
      name: node-browsers-docker
    working_directory: ~/pix
    parallelism: 3
    steps:
      - attach_workspace:
          at: ~/pix
  mon_pix_lint:
    executor:
      name: node-docker
    working_directory: ~/pix/mon-pix
    steps:
      - attach_workspace:
          at: ~/pix
      - run:
          name: Lint
          command: pnpm --filter mon-pix run lint
          when: always

  mon_pix_test:
    executor:
      name: node-browsers-docker
    working_directory: ~/pix/mon-pix
    parallelism: 3
    steps:
      - browser-tools/install-chrome
      - attach_workspace:
          at: ~/pix
      - run:
          environment:
            RESULTS_PATH: ../../test-results/mon_pix
          name: Test
          command: pnpm --filter mon-pix run test:ci
          when: always
      - store_test_results:
          path: /home/circleci/test-results/mon_pix
      - store_artifacts:
          path: /home/circleci/test-results/mon_pix

  orga_build_and_test:
    executor:
      name: node-browsers-docker
    working_directory: ~/pix
    steps:
      - browser-tools/install-chrome
      - attach_workspace:
          at: ~/pix
      - run:
          name: Lint
          command: pnpm --filter pix-orga run lint
      - run:
          environment:
            RESULTS_PATH: ../../test-results/orga
          name: Test
          command: pnpm --filter pix-orga run test:ci
      - store_test_results:
          path: /home/circleci/test-results/orga
      - store_artifacts:
          path: /home/circleci/test-results/orga

  pix1d_build_and_test:
    executor:
      name: node-browsers-docker
    working_directory: ~/pix
    steps:
      - browser-tools/install-chrome
      - attach_workspace:
          at: ~/pix
      - run:
          name: Lint
          command: pnpm --filter 1d run lint
      - run:
          environment:
            RESULTS_PATH: ../../test-results/pix1d
          name: Test
          command: pnpm --filter 1d run test:ci
      - store_test_results:
          path: /home/circleci/test-results/pix1d
      - store_artifacts:
          path: /home/circleci/test-results/pix1d

  certif_build_and_test:
    executor:
      name: node-browsers-docker
    working_directory: ~/pix
    steps:
      - browser-tools/install-chrome
      - attach_workspace:
          at: ~/pix
      - run:
          name: Lint
          command: pnpm --filter pix-certif run lint
      - run:
          environment:
            RESULTS_PATH: ../../test-results/certif
          name: Test
          command: pnpm --filter pix-certif run test:ci
      - store_test_results:
          path: /home/circleci/test-results/certif
      - store_artifacts:
          path: /home/circleci/test-results/certif

  admin_build_and_test:
    executor:
      name: node-browsers-docker
    working_directory: ~/pix
    steps:
      - browser-tools/install-chrome
      - attach_workspace:
          at: ~/pix
      - run:
          name: Lint
          command: pnpm --filter pix-admin run lint
      - run:
          environment:
            RESULTS_PATH: ../../test-results/admin
          name: Test
          command: pnpm --filter pix-admin run test:ci
      - store_test_results:
          path: /home/circleci/test-results/admin
      - store_artifacts:
          path: /home/circleci/test-results/admin

  e2e_test:
    executor:
      name: node-browsers-redis-postgres-docker
    parallelism: 4
    working_directory: ~/pix
    steps:
      - browser-tools/install-chrome
      - attach_workspace:
          at: ~/pix
      - run:
          name: Lint
          command: pnpm --filter pix-e2e run lint

      - run:
          name: Start Pix API
          working_directory: ~/pix
          environment:
            DATABASE_URL: 'postgres://circleci@localhost:5432/circleci'
            REDIS_URL: 'redis://localhost:6379'
          background: true
          command: pnpm --filter pix-api run start

      - run:
          name: Start Pix App
          working_directory: ~/pix
          environment:
            JOBS: 1
          background: true
          command: pnpm --filter mon-pix start

      - run:
          name: Run tests
          environment:
            DATABASE_URL: 'postgres://circleci@localhost:5432/circleci'
          command: npm run test:ci:app
      - store_test_results:
          path: /home/circleci/test-results

      - run:
          name: Start Pix Orga
          working_directory: ~/pix
          environment:
            JOBS: 2
          background: true
          command: pnpm --filter pix-orga start

      - run:
          name: Install Cypress
          command: pnpm --filter pix-e2e exec cypress install
      - run:
          name: Run tests
          environment:
            DATABASE_URL: 'postgres://circleci@localhost:5432/circleci'
          command: pnpm --filter pix-e2e run test:ci
      - store_test_results:
          path: /home/circleci/test-results
