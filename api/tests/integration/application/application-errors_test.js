const createServer = require('../../../server');
const { expect, sinon, generateValidRequestAuthorizationHeader } = require('../../test-helper');

const usecases = require('../../../lib/domain/usecases');

describe('Unexpected errors generated by the server', () => {
  let server;

  beforeEach(async () => {
    const unexpectedErrorWithRuntimeDetail = new Error('Any runtime detail message');
    sinon.stub(usecases, 'getCurrentUser').throws(unexpectedErrorWithRuntimeDetail);
    server = await createServer();
  });

  it('should result in a generic error message sent to the client', async () => {
    const options = {
      method: 'GET',
      url: '/api/users/me',
      headers: { authorization: generateValidRequestAuthorizationHeader() },
    };

    const response = await server.inject(options);

    expect(response.result).to.deep.equal({
      error: 'Internal Server Error',
      message:'An internal server error occurred',
      statusCode: 500,
    });
  });
});
