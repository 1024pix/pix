# Rate limit
# See: https://www.nginx.com/blog/rate-limiting-nginx/
# Args:
#   - Key: $binary_remote_addr =
#   - Zone: shared memory zone used to store the state of each IP address
#           10m = 10 mega ; 16,000 IP addresses takes 1 megabyte
#   - Rate: NGINX actually tracks requests at millisecond granularity,
#           /!\ Very low for testing purposes, no burst allowed

limit_req_zone $binary_remote_addr zone=apiratelimit:10m rate=1r/s;
error_log /dev/stdout info;

server {
    server_name localhost;
    listen <%= ENV['PORT'] %>;

    charset utf-8;

    # Disable compression that is performed by the Scalingo router anyway
    gzip off;

    root /app/;

    location / {
        # Fall back to index.html for routes that don't match an existing file
        try_files $uri /maintenance_page.html;
    }

    location /api/ {
        proxy_pass http://localhost:<%= ENV['NODE_PORT'] %>;

        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        Upgrade $http_upgrade;
        proxy_set_header        Connection "upgrade";
        proxy_redirect          off;
    }

    location = /api/swagger.json {

        resolver local=on;
        resolver_timeout 5s;

        access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000)  -- 1 second

                local ok, err = red:connect("<%= ENV['NGINX_REDIS_URL'] %>", <%= ENV['NGINX_REDIS_PORT'] %>)
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect to Redis: ", err)
                    return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                local res, err = red:auth("<%= ENV['NGINX_REDIS_PASSWORD'] %>")
                if not res then
                    ngx.say("failed to authenticate: ", err)
                    return
                end

                local limit = 10
                local key_exists, err = red:exists(key)
                ngx.log(ngx.INF, "log key_exists : " .. tostring(key_exists))
                if key_exists == 1 then
                    local count, err = red:get(key)
                    ngx.log(ngx.INF, "log key count : " .. tostring(count))
                    if not count then
                        red:incr(key)
                    end
                    if tonumber(count) < limit then
                        red:incr(key)
                    end
                    ngx.log(ngx.INF, "incremented count" .. tostring(count))
                    if tonumber(count) > limit then
                        return ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
                    end
                else
                    -- Écrire la clé dans Redis si elle n'existe pas
                    local ok, err = red:set(key, 1)
                    if not ok then
                        ngx.log(ngx.ERR, "failed to set limit in Redis: ", err)
                        return ngx.exit(500)
                    end
                end

                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.log(ngx.ERR, "failed to set keepalive: ", err)
                end
            }


        <%# limit_req zone=apiratelimit;
        limit_req_status 509; %>

        proxy_pass http://localhost:<%= ENV['NODE_PORT'] %>/api/swagger.json;

        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        Upgrade $http_upgrade;
        proxy_set_header        Connection "upgrade";
        proxy_redirect          off;
    }
}

