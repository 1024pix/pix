const up = async function (knex) {
  await knex.raw(
    `-- migrate data
     -- it is accepted that rows with a filename WITHOUT status are NOT migrated
    CREATE TABLE "certification-courses-cpf-infos" AS (
          SELECT
            row_number() over(order by id) as "id",
            "cc"."id" AS "certificationCourseId",
            "cc"."cpfFilename" AS "filename",
            "cc"."cpfImportStatus" AS "importStatus",
            "cc"."updatedAt" AS "createdAt",
            "cc"."updatedAt" AS "updatedAt"
          FROM "certification-courses" cc
          WHERE
            "cc"."cpfImportStatus" IS NOT NULL AND "cc"."cpfImportStatus" != 'OUTDATED'
        );

    -- change id to autogenerated column primary key
    ALTER TABLE "certification-courses-cpf-infos"
        ALTER id SET NOT NULL,
        ALTER id ADD GENERATED BY DEFAULT AS identity,
        ADD CONSTRAINT "certification-courses-cpf-infos_pkey" PRIMARY KEY ("id");

    -- ensure identity restarts from max of current migrated data
    SELECT setval(
      pg_get_serial_sequence('certification-courses-cpf-infos', 'id'),
      (select max(id) + 1 from "certification-courses-cpf-infos")
    );`,
  );

  await knex.schema.alterTable('certification-courses-cpf-infos', (table) => {
    table.unique('certificationCourseId');
    table.foreign('certificationCourseId').references('id').inTable('certification-courses');
  });
};

const down = async function (knex) {
  return knex.table('certification-courses-cpf-infos').delete();
};

export { up, down };
