const up = async function (knex) {
  await knex.raw(
    `-- migrate data
    CREATE TABLE "compte-personnel-formation" AS (
          SELECT
            row_number() over(order by id) as "id",
            "cc"."id" AS "certificationCourseId",
            "cc"."cpfFilename" AS "filename",
            "cc"."cpfImportStatus" AS "importStatus",
            "cc"."updatedAt" AS "createdAt",
            "cc"."updatedAt" AS "updatedAt"
          FROM "certification-courses" cc
          WHERE
            "cc"."cpfFilename" IS NOT NULL
            OR "cc"."cpfImportStatus" IS NOT NULL
        );

    -- change id to autogenerated column primary key
    ALTER TABLE "compte-personnel-formation"
        ALTER id SET NOT NULL,
        ALTER id ADD GENERATED BY DEFAULT AS identity,
        ADD CONSTRAINT "compte-personnel-formation_pkey" PRIMARY KEY ("id");

    -- ensure identity restarts from max of current migrated data
    SELECT setval(
      pg_get_serial_sequence('compte-personnel-formation', 'id'),
      (select max(id) + 1 from "compte-personnel-formation")
    );`,
  );

  await knex.schema.alterTable('compte-personnel-formation', (table) => {
    table.foreign('certificationCourseId').references('id').inTable('certification-courses');
  });
};

const down = async function (knex) {
  return knex.table('compte-personnel-formation').delete();
};

export { up, down };
